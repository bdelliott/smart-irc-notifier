#!/usr/bin/env python
"""Send notification to either email or termiinal depending on whether
computer is idle or not.

Configure using ~/.notify-smart.cfg
"""

import ConfigParser
from email.mime.text import MIMEText
import os
import smtplib
import subprocess
import sys
from Quartz.CoreGraphics import CGEventSourceSecondsSinceLastEventType


CONFIG_FILE = os.path.expanduser('~/.notify-smart.cfg')
TERM_NOTIFIER = '/Applications/terminal-notifier.app/Contents/MacOS/terminal-notifier'


def get_idle_time():
    """Determine idle time in seconds in Mac OS X"""
    NX_ALLEVENTS = int(4294967295)  # 32-bits, all on.
    return CGEventSourceSecondsSinceLastEventType(1, NX_ALLEVENTS)


##############################################################################
#
# notify_terminal
#
##############################################################################

def notify_terminal(cfg):
    args = [TERM_NOTIFIER, '-group', 'IRC', '-title', 'IRC']
    p = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p.communicate(sys.stdin)
    assert p.returncode == 0


##############################################################################
#
# notify_email
#
##############################################################################

def notify_email(cfg):
    host = cfg.get('email', 'smtp_host')
    assert host
    server = smtp_connect(host,
                          cfg.get('email', 'smtp_user'),
                          cfg.get('email', 'smtp_password'))
    try:
        smtp_send(server,
                  cfg.get('email', 'from_email'),
                  cfg.get('email', 'to_email'),
                  body=sys.stdin.read())
    finally:
        smtp_close(server)


def smtp_connect(host, user, password):
    server = smtplib.SMTP(host)
    server.ehlo()
    server.starttls()
    server.login(user, password)
    return server


def smtp_close(server):
    server.quit()


def smtp_send(server, from_email, to_email, body=None, subject=None):
    msg = MIMEText(body)
    if subject:
        msg['Subject'] = subject
    msg['From'] = from_email
    msg['To'] = to_email
    server.sendmail(from_email, [to_email], msg.as_string())


def main():
    cfg = ConfigParser.ConfigParser()
    cfg.read(CONFIG_FILE)

    idle_threshold  = cfg.getint('general', 'idle')

    if get_idle_time() > idle_threshold:
        notify_email(cfg)
    else:
        notify_terminal(cfg)


if __name__ == '__main__':
    main()
